<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\USBHS_Object\msc_udisk.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\USBHS_Object\msc_udisk.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sun Nov 27 00:36:37 2022
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
msc_core_out &rArr; msc_bbb_data_out &rArr; msc_bbb_cbw_decode &rArr; scsi_process_cmd &rArr; scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[27]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC_IRQHandler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from gd32f4xx_it.o(.text.BusFault_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[2b]">CAN0_EWMC_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[29]">CAN0_RX0_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[2a]">CAN0_RX1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[28]">CAN0_TX_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[57]">CAN1_EWMC_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[55]">CAN1_RX0_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[56]">CAN1_RX1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[54]">CAN1_TX_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[63]">DCI_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[20]">DMA0_Channel0_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[21]">DMA0_Channel1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[22]">DMA0_Channel2_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[23]">DMA0_Channel3_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[24]">DMA0_Channel4_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[25]">DMA0_Channel5_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[26]">DMA0_Channel6_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[44]">DMA0_Channel7_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[4d]">DMA1_Channel0_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel2_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[50]">DMA1_Channel3_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[51]">DMA1_Channel4_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[59]">DMA1_Channel5_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[5a]">DMA1_Channel6_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[5b]">DMA1_Channel7_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from gd32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[52]">ENET_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[53]">ENET_WKUP_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[45]">EXMC_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[3d]">EXTI10_15_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[2c]">EXTI5_9_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[19]">FMC_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from gd32f4xx_it.o(.text.HardFault_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[35]">I2C0_ER_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[34]">I2C0_EV_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[37]">I2C1_ER_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[36]">I2C1_EV_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[5e]">I2C2_ER_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[5d]">I2C2_EV_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[16]">LVD_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from gd32f4xx_it.o(.text.MemManage_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from gd32f4xx_it.o(.text.NMI_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from gd32f4xx_it.o(.text.PendSV_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[1a]">RCU_CTC_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[3e]">RTC_Alarm_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[18]">RTC_WKUP_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[46]">SDIO_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[38]">SPI0_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[39]">SPI1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[48]">SPI2_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[5]">STORAGE_GetMaxLun</a> from usbd_storage_msd.o(.text.STORAGE_GetMaxLun) referenced 2 times from usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
 <LI><a href="#[0]">STORAGE_Init</a> from usbd_storage_msd.o(.text.STORAGE_Init) referenced 2 times from usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
 <LI><a href="#[1]">STORAGE_IsReady</a> from usbd_storage_msd.o(.text.STORAGE_IsReady) referenced 2 times from usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
 <LI><a href="#[2]">STORAGE_IsWriteProtected</a> from usbd_storage_msd.o(.text.STORAGE_IsWriteProtected) referenced 2 times from usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
 <LI><a href="#[3]">STORAGE_Read</a> from usbd_storage_msd.o(.text.STORAGE_Read) referenced 2 times from usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
 <LI><a href="#[4]">STORAGE_Write</a> from usbd_storage_msd.o(.text.STORAGE_Write) referenced 2 times from usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
 <LI><a href="#[11]">SVC_Handler</a> from gd32f4xx_it.o(.text.SVC_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from gd32f4xx_it.o(.text.SysTick_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_gd32f4xx.o(.text.SystemInit) referenced from startup_gd32f407_427.o(.text)
 <LI><a href="#[17]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[2d]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[30]">TIMER0_Channel_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[2f]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[2e]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[31]">TIMER1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[32]">TIMER2_IRQHandler</a> from gd32f4xx_it.o(.text.TIMER2_IRQHandler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[33]">TIMER3_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[47]">TIMER4_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[4b]">TIMER5_DAC_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[4c]">TIMER6_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[40]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[43]">TIMER7_Channel_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[42]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[41]">TIMER7_UP_TIMER12_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[64]">TRNG_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[49]">UART3_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[3a]">USART0_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[3b]">USART1_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[3c]">USART2_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[5c]">USART5_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[58]">USBFS_IRQHandler</a> from gd32f4xx_it.o(.text.USBFS_IRQHandler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[3f]">USBFS_WKUP_IRQHandler</a> from gd32f4xx_it.o(.text.USBFS_WKUP_IRQHandler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[60]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[5f]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[62]">USBHS_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[61]">USBHS_WKUP_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from gd32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[15]">WWDGT_IRQHandler</a> from startup_gd32f407_427.o(.text) referenced from startup_gd32f407_427.o(RESET)
 <LI><a href="#[67]">__main</a> from __main.o(!!!main) referenced from startup_gd32f407_427.o(.text)
 <LI><a href="#[69]">_usb_std_clearfeature</a> from usbd_enum.o(.text._usb_std_clearfeature) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6f]">_usb_std_getconfiguration</a> from usbd_enum.o(.text._usb_std_getconfiguration) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6d]">_usb_std_getdescriptor</a> from usbd_enum.o(.text._usb_std_getdescriptor) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[71]">_usb_std_getinterface</a> from usbd_enum.o(.text._usb_std_getinterface) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[68]">_usb_std_getstatus</a> from usbd_enum.o(.text._usb_std_getstatus) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6a]">_usb_std_reserved</a> from usbd_enum.o(.text._usb_std_reserved) referenced 2 times from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6c]">_usb_std_setaddress</a> from usbd_enum.o(.text._usb_std_setaddress) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[70]">_usb_std_setconfiguration</a> from usbd_enum.o(.text._usb_std_setconfiguration) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6e]">_usb_std_setdescriptor</a> from usbd_enum.o(.text._usb_std_setdescriptor) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[6b]">_usb_std_setfeature</a> from usbd_enum.o(.text._usb_std_setfeature) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[72]">_usb_std_setinterface</a> from usbd_enum.o(.text._usb_std_setinterface) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[73]">_usb_std_synchframe</a> from usbd_enum.o(.text._usb_std_synchframe) referenced from usbd_enum.o(.text.usbd_standard_request)
 <LI><a href="#[7]">msc_core_deinit</a> from usbd_msc_core.o(.text.msc_core_deinit) referenced 2 times from usbd_msc_core.o(.data.msc_class)
 <LI><a href="#[9]">msc_core_in</a> from usbd_msc_core.o(.text.msc_core_in) referenced 2 times from usbd_msc_core.o(.data.msc_class)
 <LI><a href="#[6]">msc_core_init</a> from usbd_msc_core.o(.text.msc_core_init) referenced 2 times from usbd_msc_core.o(.data.msc_class)
 <LI><a href="#[a]">msc_core_out</a> from usbd_msc_core.o(.text.msc_core_out) referenced 2 times from usbd_msc_core.o(.data.msc_class)
 <LI><a href="#[8]">msc_core_req</a> from usbd_msc_core.o(.text.msc_core_req) referenced 2 times from usbd_msc_core.o(.data.msc_class)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[76]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10f]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[110]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[111]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[7c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[77]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[112]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[113]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[114]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[115]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[116]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[117]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[118]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[119]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[120]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[121]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[122]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[123]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[124]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[125]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[81]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[12a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[75]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[12d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[79]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; usbd_init &rArr; usb_devcore_init &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[86]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[80]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[130]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[82]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_gd32f407_427.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_basic_init
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7f]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[137]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[138]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[139]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SRAM_ReadMultiBlocks</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sram_msd.o(.text.SRAM_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SRAM_ReadMultiBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Read
</UL>

<P><STRONG><a name="[88]"></a>SRAM_WriteMultiBlocks</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sram_msd.o(.text.SRAM_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SRAM_WriteMultiBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORAGE_Write
</UL>

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, system_gd32f4xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32f4xx_it.o(.text.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; usb_timer_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USBFS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32f4xx_it.o(.text.USBFS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBFS_IRQHandler &rArr; usbd_isr &rArr; usbd_int_epout &rArr; usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32f4xx_it.o(.text.USBFS_WKUP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBFS_WKUP_IRQHandler &rArr; resume_mcu_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clock_active
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu_clk
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pll48m_clock_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ck48m_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f407_427.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f4xx_exti.o(.text.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>gpio_af_set</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
</UL>

<P><STRONG><a name="[e1]"></a>gpio_mode_set</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gd32f4xx_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
</UL>

<P><STRONG><a name="[e2]"></a>gpio_output_options_set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gd32f4xx_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
</UL>

<P><STRONG><a name="[d4]"></a>int_to_unicode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_enum.o(.text.int_to_unicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
</UL>

<P><STRONG><a name="[7e]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, app.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = main &rArr; usbd_init &rArr; usb_devcore_init &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b0]"></a>msc_bbb_clrfeature</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_msc_bbb.o(.text.msc_bbb_clrfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = msc_bbb_clrfeature &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_csw_send
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_req
</UL>

<P><STRONG><a name="[af]"></a>msc_bbb_csw_send</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usbd_msc_bbb.o(.text.msc_bbb_csw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_out
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_in
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_clrfeature
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_cbw_decode
</UL>

<P><STRONG><a name="[b2]"></a>msc_bbb_data_in</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usbd_msc_bbb.o(.text.msc_bbb_data_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = msc_bbb_data_in &rArr; scsi_process_cmd &rArr; scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_csw_send
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_in
</UL>

<P><STRONG><a name="[b3]"></a>msc_bbb_data_out</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usbd_msc_bbb.o(.text.msc_bbb_data_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = msc_bbb_data_out &rArr; msc_bbb_cbw_decode &rArr; scsi_process_cmd &rArr; scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_csw_send
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_cbw_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_out
</UL>

<P><STRONG><a name="[b8]"></a>msc_bbb_deinit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_msc_bbb.o(.text.msc_bbb_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_deinit
</UL>

<P><STRONG><a name="[b4]"></a>msc_bbb_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usbd_msc_bbb.o(.text.msc_bbb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = msc_bbb_init &rArr; usbd_fifo_flush &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_flush
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_init
</UL>

<P><STRONG><a name="[b6]"></a>msc_bbb_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_msc_bbb.o(.text.msc_bbb_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = msc_bbb_reset &rArr; usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_req
</UL>

<P><STRONG><a name="[bb]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, gd32f4xx_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>

<P><STRONG><a name="[bc]"></a>nvic_priority_group_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_misc.o(.text.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>

<P><STRONG><a name="[108]"></a>pmu_to_deepsleepmode</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, gd32f4xx_pmu.o(.text.pmu_to_deepsleepmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
</UL>

<P><STRONG><a name="[8e]"></a>rcu_ck48m_clock_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(.text.rcu_ck48m_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
</UL>

<P><STRONG><a name="[9c]"></a>rcu_clock_freq_get</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, gd32f4xx_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[be]"></a>rcu_flag_get</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(.text.rcu_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu_clk
</UL>

<P><STRONG><a name="[bd]"></a>rcu_osci_on</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(.text.rcu_osci_on))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu_clk
</UL>

<P><STRONG><a name="[8f]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_gpio_config
</UL>

<P><STRONG><a name="[8d]"></a>rcu_pll48m_clock_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(.text.rcu_pll48m_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
</UL>

<P><STRONG><a name="[bf]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(.text.rcu_system_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu_clk
</UL>

<P><STRONG><a name="[c0]"></a>rcu_system_clock_source_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(.text.rcu_system_clock_source_get))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resume_mcu_clk
</UL>

<P><STRONG><a name="[ad]"></a>scsi_process_cmd</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, usbd_msc_scsi.o(.text.scsi_process_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = scsi_process_cmd &rArr; scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_verify10
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_toc_cmd_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_test_unit_ready
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_start_stop_unit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_request_sense
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read_format_capacity
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read_capacity10
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_mode_sense6
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_mode_sense10
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_mode_select6
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_mode_select10
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_inquiry
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_allow_medium_removal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_out
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_in
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_cbw_decode
</UL>

<P><STRONG><a name="[ac]"></a>scsi_sense_code</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_msc_scsi.o(.text.scsi_sense_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scsi_sense_code
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_verify10
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_test_unit_ready
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_check_address_range
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_cbw_decode
</UL>

<P><STRONG><a name="[d3]"></a>serial_string_get</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_enum.o(.text.serial_string_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_string_get &rArr; int_to_unicode
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_to_unicode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[a0]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(.text.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[9b]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(.text.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
</UL>

<P><STRONG><a name="[a2]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(.text.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[9e]"></a>timer_init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, gd32f4xx_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[9d]"></a>timer_interrupt_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(.text.timer_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[a1]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[9f]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>

<P><STRONG><a name="[e4]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f4xx_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>

<P><STRONG><a name="[d6]"></a>usb_basic_init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, drv_usb_core.o(.text.usb_basic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = usb_basic_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[90]"></a>usb_clock_active</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_clock_active))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>usb_core_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, drv_usb_core.o(.text.usb_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_core_init &rArr; usb_core_reset &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[ed]"></a>usb_ctlep_startout</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_ctlep_startout))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_recev
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[fa]"></a>usb_curmode_set</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_usb_core.o(.text.usb_curmode_set))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[db]"></a>usb_devcore_init</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, drv_usb_dev.o(.text.usb_devcore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usb_devcore_init &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devint_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_rxfifo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_txfifo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[e0]"></a>usb_devint_enable</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_devint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[a3]"></a>usb_gpio_config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.usb_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_gpio_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>usb_iepintr_read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_iepintr_read))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[a7]"></a>usb_intr_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.usb_intr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_intr_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>usb_mdelay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.usb_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_mdelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>

<P><STRONG><a name="[a4]"></a>usb_rcu_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.usb_rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_rcu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pll48m_clock_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ck48m_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>usb_rxfifo_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_rxfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_rxfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_flush
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[106]"></a>usb_rxfifo_read</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_usb_core.o(.text.usb_rxfifo_read))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rxfifo
</UL>

<P><STRONG><a name="[dd]"></a>usb_set_txfifo</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_set_txfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_set_txfifo
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[a5]"></a>usb_timer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.usb_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_timer_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>usb_timer_irq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.usb_timer_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_timer_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>usb_transc_active</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, drv_usb_dev.o(.text.usb_transc_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_transc_active
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_setup
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
</UL>

<P><STRONG><a name="[f7]"></a>usb_transc_clrstall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_transc_clrstall))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall_clear
</UL>

<P><STRONG><a name="[f3]"></a>usb_transc_deactivate</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_transc_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear
</UL>

<P><STRONG><a name="[e5]"></a>usb_transc_inxfer</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, drv_usb_dev.o(.text.usb_transc_inxfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>

<P><STRONG><a name="[f4]"></a>usb_transc_outxfer</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_usb_dev.o(.text.usb_transc_outxfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_transc_outxfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>

<P><STRONG><a name="[f6]"></a>usb_transc_stall</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_transc_stall))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>

<P><STRONG><a name="[de]"></a>usb_txfifo_flush</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_txfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_fifo_flush
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[e6]"></a>usb_txfifo_write</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, drv_usb_core.o(.text.usb_txfifo_write))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_inxfer
</UL>

<P><STRONG><a name="[da]"></a>usb_udelay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.usb_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_reset
</UL>

<P><STRONG><a name="[10c]"></a>usbd_class_request</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_class_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[e8]"></a>usbd_connect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_connect &rArr; usb_mdelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_connect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[ea]"></a>usbd_ctl_recev</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ctl_recev &rArr; usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transc
</UL>

<P><STRONG><a name="[eb]"></a>usbd_ctl_send</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
</UL>

<P><STRONG><a name="[ec]"></a>usbd_ctl_status_recev</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_status_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_ctl_status_recev &rArr; usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
</UL>

<P><STRONG><a name="[ee]"></a>usbd_ctl_status_send</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_ctl_status_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transc
</UL>

<P><STRONG><a name="[ef]"></a>usbd_disconnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbd_disconnect &rArr; usb_mdelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_dev_disconnect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[f2]"></a>usbd_enum_error</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_enum_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_enum_error &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[b7]"></a>usbd_ep_clear</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_deinit
</UL>

<P><STRONG><a name="[a9]"></a>usbd_ep_recev</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_outxfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_write
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_reset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_csw_send
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_abort
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_recev
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_recev
</UL>

<P><STRONG><a name="[b1]"></a>usbd_ep_send</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_inxfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_csw_send
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_send
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
</UL>

<P><STRONG><a name="[ba]"></a>usbd_ep_setup</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbd_ep_setup &rArr; usb_transc_active
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_active
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_core_init
</UL>

<P><STRONG><a name="[98]"></a>usbd_ep_stall</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_clrfeature
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_abort
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_setfeature
</UL>

<P><STRONG><a name="[92]"></a>usbd_ep_stall_clear</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_ep_stall_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_ep_stall_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_clrstall
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_clearfeature
</UL>

<P><STRONG><a name="[b5]"></a>usbd_fifo_flush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbd_core.o(.text.usbd_fifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usbd_fifo_flush &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_init
</UL>

<P><STRONG><a name="[f8]"></a>usbd_in_transc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbd_transc.o(.text.usbd_in_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_recev
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_send
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[a6]"></a>usbd_init</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbd_core.o(.text.usbd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = usbd_init &rArr; usb_devcore_init &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_string_get
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_globalint_enable
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_globalint_disable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_curmode_set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_basic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>usbd_isr</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, drv_usbd_int.o(.text.usbd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usbd_isr &rArr; usbd_int_epout &rArr; usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_suspend
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_rxfifo
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_reset
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_enumfinish
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>usbd_out_transc</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_transc.o(.text.usbd_out_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_out_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[102]"></a>usbd_setup_transc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbd_transc.o(.text.usbd_setup_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_status_send
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ctl_recev
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_vendor_request
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_standard_request
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_enum_error
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_class_request
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[10a]"></a>usbd_standard_request</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_standard_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_standard_request
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[10b]"></a>usbd_vendor_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text.usbd_vendor_request))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
</UL>

<P><STRONG><a name="[78]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[13c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[13d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[99]"></a>hw_delay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f4xx_hw.o(.text.hw_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_time_set
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
</UL>

<P><STRONG><a name="[9a]"></a>hw_time_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f4xx_hw.o(.text.hw_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_delay
</UL>

<P><STRONG><a name="[8c]"></a>resume_mcu_clk</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32f4xx_it.o(.text.resume_mcu_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = resume_mcu_clk
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_WKUP_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>STORAGE_GetMaxLun</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(.text.STORAGE_GetMaxLun))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
</UL>
<P><STRONG><a name="[0]"></a>STORAGE_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(.text.STORAGE_Init))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
</UL>
<P><STRONG><a name="[1]"></a>STORAGE_IsReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(.text.STORAGE_IsReady))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
</UL>
<P><STRONG><a name="[2]"></a>STORAGE_IsWriteProtected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_storage_msd.o(.text.STORAGE_IsWriteProtected))
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
</UL>
<P><STRONG><a name="[3]"></a>STORAGE_Read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_storage_msd.o(.text.STORAGE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STORAGE_Read &rArr; SRAM_ReadMultiBlocks
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_ReadMultiBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
</UL>
<P><STRONG><a name="[4]"></a>STORAGE_Write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_storage_msd.o(.text.STORAGE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = STORAGE_Write &rArr; SRAM_WriteMultiBlocks
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_WriteMultiBlocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_storage_msd.o(.data.USBD_Internal_Storage_fops)
</UL>
<P><STRONG><a name="[d5]"></a>system_clock_168m_25m_hxtal</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, system_gd32f4xx.o(.text.system_clock_168m_25m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[89]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f4xx.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_168m_25m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d8]"></a>usb_core_reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_usb_core.o(.text.usb_core_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_core_reset &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>

<P><STRONG><a name="[dc]"></a>usb_set_rxfifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_usb_dev.o(.text.usb_set_rxfifo))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devcore_init
</UL>

<P><STRONG><a name="[fd]"></a>usb_iepintnum_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usb_iepintnum_read))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[100]"></a>usb_oepintnum_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usb_oepintnum_read))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[101]"></a>usb_oepintr_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usb_oepintr_read))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epout
</UL>

<P><STRONG><a name="[f1]"></a>usbd_emptytxfifo_write</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, drv_usbd_int.o(.text.usbd_emptytxfifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbd_emptytxfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_int_epin
</UL>

<P><STRONG><a name="[109]"></a>usbd_int_enumfinish</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, drv_usbd_int.o(.text.usbd_int_enumfinish))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[fc]"></a>usbd_int_epin</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, drv_usbd_int.o(.text.usbd_int_epin))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbd_int_epin &rArr; usbd_in_transc &rArr; usbd_ctl_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_in_transc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_emptytxfifo_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_iepintnum_read
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_iepintr_read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[ff]"></a>usbd_int_epout</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, drv_usbd_int.o(.text.usbd_int_epout))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usbd_int_epout &rArr; usbd_setup_transc &rArr; usbd_ctl_status_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_setup_transc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_out_transc
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_oepintr_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_oepintnum_read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[104]"></a>usbd_int_reset</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, drv_usbd_int.o(.text.usbd_int_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbd_int_reset &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_transc_active
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_ctlep_startout
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[105]"></a>usbd_int_rxfifo</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, drv_usbd_int.o(.text.usbd_int_rxfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_int_rxfifo
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[107]"></a>usbd_int_suspend</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, drv_usbd_int.o(.text.usbd_int_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbd_int_suspend &rArr; pmu_to_deepsleepmode
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_to_deepsleepmode
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_isr
</UL>

<P><STRONG><a name="[e9]"></a>usb_dev_connect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_dev_connect))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_connect
</UL>

<P><STRONG><a name="[f0]"></a>usb_dev_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_dev_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_disconnect
</UL>

<P><STRONG><a name="[f9]"></a>usb_globalint_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_globalint_disable))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[fb]"></a>usb_globalint_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_core.o(.text.usb_globalint_enable))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_init
</UL>

<P><STRONG><a name="[96]"></a>_usb_bos_desc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_bos_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[95]"></a>_usb_config_desc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_config_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[93]"></a>_usb_dev_desc_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_dev_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[69]"></a>_usb_std_clearfeature</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_clearfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _usb_std_clearfeature &rArr; usbd_ep_stall_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6f]"></a>_usb_std_getconfiguration</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getconfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6d]"></a>_usb_std_getdescriptor</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_getdescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_getdescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_str_desc_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_dev_desc_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_config_desc_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_bos_desc_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[71]"></a>_usb_std_getinterface</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getinterface))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[68]"></a>_usb_std_getstatus</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_getstatus))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6a]"></a>_usb_std_reserved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_reserved))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6c]"></a>_usb_std_setaddress</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setaddress &rArr; usbd_addr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_addr_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[70]"></a>_usb_std_setconfiguration</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbd_enum.o(.text._usb_std_setconfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setconfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6e]"></a>_usb_std_setdescriptor</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_setdescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[6b]"></a>_usb_std_setfeature</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _usb_std_setfeature &rArr; usbd_ep_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[72]"></a>_usb_std_setinterface</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbd_enum.o(.text._usb_std_setinterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _usb_std_setinterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[73]"></a>_usb_std_synchframe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_std_synchframe))
<BR>[Address Reference Count : 1]<UL><LI> usbd_enum.o(.text.usbd_standard_request)
</UL>
<P><STRONG><a name="[94]"></a>_usb_str_desc_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd_enum.o(.text._usb_str_desc_get))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_getdescriptor
</UL>

<P><STRONG><a name="[e7]"></a>usb_devaddr_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_enum.o(.text.usb_devaddr_set))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_addr_set
</UL>

<P><STRONG><a name="[97]"></a>usbd_addr_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbd_enum.o(.text.usbd_addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbd_addr_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_devaddr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_usb_std_setaddress
</UL>

<P><STRONG><a name="[a8]"></a>msc_bbb_abort</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbd_msc_bbb.o(.text.msc_bbb_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = msc_bbb_abort &rArr; usbd_ep_recev &rArr; usb_transc_outxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_stall
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_cbw_decode
</UL>

<P><STRONG><a name="[aa]"></a>msc_bbb_cbw_decode</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usbd_msc_bbb.o(.text.msc_bbb_cbw_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = msc_bbb_cbw_decode &rArr; scsi_process_cmd &rArr; scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_csw_send
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_rxcount_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_send
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_out
</UL>

<P><STRONG><a name="[ae]"></a>msc_bbb_data_send</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_msc_bbb.o(.text.msc_bbb_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = msc_bbb_data_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_cbw_decode
</UL>

<P><STRONG><a name="[ab]"></a>usbd_rxcount_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_msc_bbb.o(.text.usbd_rxcount_get))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_cbw_decode
</UL>

<P><STRONG><a name="[7]"></a>msc_core_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbd_msc_core.o(.text.msc_core_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msc_core_deinit &rArr; usbd_ep_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_deinit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data.msc_class)
</UL>
<P><STRONG><a name="[9]"></a>msc_core_in</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc_core.o(.text.msc_core_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = msc_core_in &rArr; msc_bbb_data_in &rArr; scsi_process_cmd &rArr; scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data.msc_class)
</UL>
<P><STRONG><a name="[6]"></a>msc_core_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, usbd_msc_core.o(.text.msc_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = msc_core_init &rArr; msc_bbb_init &rArr; usbd_fifo_flush &rArr; usb_txfifo_flush &rArr; usb_udelay &rArr; hw_delay &rArr; hw_time_set &rArr; timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_setup
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data.msc_class)
</UL>
<P><STRONG><a name="[a]"></a>msc_core_out</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbd_msc_core.o(.text.msc_core_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = msc_core_out &rArr; msc_bbb_data_out &rArr; msc_bbb_cbw_decode &rArr; scsi_process_cmd &rArr; scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_data_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data.msc_class)
</UL>
<P><STRONG><a name="[8]"></a>msc_core_req</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, usbd_msc_core.o(.text.msc_core_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = msc_core_req &rArr; msc_bbb_clrfeature &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_clrfeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_msc_core.o(.data.msc_class)
</UL>
<P><STRONG><a name="[c8]"></a>scsi_allow_medium_removal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_allow_medium_removal))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[c1]"></a>scsi_check_address_range</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbd_msc_scsi.o(.text.scsi_check_address_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scsi_check_address_range &rArr; scsi_sense_code
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_verify10
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
</UL>

<P><STRONG><a name="[c4]"></a>scsi_inquiry</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_inquiry))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[cf]"></a>scsi_mode_select10</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_mode_select10))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[c5]"></a>scsi_mode_select6</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_mode_select6))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[d0]"></a>scsi_mode_sense10</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_mode_sense10))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[c6]"></a>scsi_mode_sense6</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_mode_sense6))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[d1]"></a>scsi_process_read</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, usbd_msc_scsi.o(.text.scsi_process_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scsi_process_read &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_send
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_read10
</UL>

<P><STRONG><a name="[d2]"></a>scsi_process_write</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbd_msc_scsi.o(.text.scsi_process_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msc_bbb_csw_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_write10
</UL>

<P><STRONG><a name="[cb]"></a>scsi_read10</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, usbd_msc_scsi.o(.text.scsi_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = scsi_read10 &rArr; scsi_process_read &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_read
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_check_address_range
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[ca]"></a>scsi_read_capacity10</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbd_msc_scsi.o(.text.scsi_read_capacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scsi_read_capacity10
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[c9]"></a>scsi_read_format_capacity</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_read_format_capacity))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[c3]"></a>scsi_request_sense</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usbd_msc_scsi.o(.text.scsi_request_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = scsi_request_sense
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[c7]"></a>scsi_start_stop_unit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_start_stop_unit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[c2]"></a>scsi_test_unit_ready</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbd_msc_scsi.o(.text.scsi_test_unit_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scsi_test_unit_ready &rArr; scsi_sense_code
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[ce]"></a>scsi_toc_cmd_read</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usbd_msc_scsi.o(.text.scsi_toc_cmd_read))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[cd]"></a>scsi_verify10</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbd_msc_scsi.o(.text.scsi_verify10))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scsi_verify10 &rArr; scsi_check_address_range &rArr; scsi_sense_code
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_check_address_range
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>

<P><STRONG><a name="[cc]"></a>scsi_write10</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, usbd_msc_scsi.o(.text.scsi_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = scsi_write10 &rArr; scsi_process_write &rArr; msc_bbb_csw_send &rArr; usbd_ep_send &rArr; usb_transc_inxfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_write
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_check_address_range
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_sense_code
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_ep_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scsi_process_cmd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
